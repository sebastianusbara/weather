import React, { Component } from 'react';
import Head from 'next/head';
import axios from 'axios';
import moment from 'moment';
import mainConfig from '../config';
import {
    MainTitle, CurrentDateTitle, Main, Container, Grid
} from './index.style';
import WeatherCard from '../components/weatherCard/weatherCard.component';
import CitySwitch from '../components/citySwitch/citySwitch.component';
import CountDown from '../components/countDown/countDown.component';
import LoadingState from '../components/loadingState/loadingState.component';
const { GEOLOCATION, WEATHER_API, API_KEY } = mainConfig;

class Home extends Component {
    constructor(props) {
        super(props);
        this.state = {
            data: [],
            timezone: '',
            city: 'Jakarta',
            cityIndex: 0,
            current: {},
            countDown: 300
        };
    }

    requestWeatherData = () => {
        const self = this;
        const { cityIndex } = this.state;

        axios.get(
            `${WEATHER_API}?lat=${GEOLOCATION[cityIndex].LAT}&lon=${GEOLOCATION[cityIndex].LONG}&&appid=${API_KEY}`
        ).then(function (response) {
            const { daily, timezone, current } = response.data;
            const data = daily.splice(0, 5);
            self.setState({ data, timezone, current });
        });
    }

    componentDidMount() {
        this.requestWeatherData();
        const self = this;
        setInterval(function(){
            const { countDown } = self.state;
            if (countDown > 0) self.setState({ countDown : countDown - 1});
            if (countDown === 0) self.setState({ countDown : 300});
        }, 1000);
    }

    setCity = (city, cityIndex) => () => {
        this.setState({ city, cityIndex }, this.requestWeatherData);
    }

    renderTitle = () => (
        <Head>
            <title>Weather App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
    );

    renderContent = (data, self) => (
        <Grid>
            {
                data.length === 0 ? '' :
                    data.map(function (item, index) {
                        const { dt, weather, temp, humidity, wind_speed } = item;
                        const { description, main } = weather[0];
                        const day = moment(dt * 1000).format("dddd");
                        const date = moment(dt * 1000).format("MMM Do YY, h:mm a");

                        return(
                            <WeatherCard
                                day={day}
                                date={date}
                                main={main}
                                temp={temp}
                                description={description}
                                humidity={humidity}
                                wind_speed={wind_speed}
                                city={self.state.city}
                                cityIndex={self.state.cityIndex}
                                key={index}
                            />
                        )
                    })
            }
        </Grid>
    );

    renderFullState = () => {
        const { data, city, current, countDown } = this.state;
        const self = this;
        const currentDate = moment(current.dt * 1000).format("MMM Do YY, h:mm a");
        if (countDown === 0) this.requestWeatherData();

        return (
            <Container>
                {this.renderTitle()}
                <Main>
                    <MainTitle>5 Day Weather Forecast.</MainTitle>
                    <CurrentDateTitle>{currentDate} / {city}, Indonesia</CurrentDateTitle>
                    <div>
                        {GEOLOCATION.map((item, i) => (
                            <CitySwitch
                                key={i}
                                item={item}
                                index={i}
                                onClick={self.setCity(item.CITY, i)}
                                selectedCity={city}
                            />))
                        }
                    </div>
                    {this.renderContent(data, this)}
                    <CountDown second={countDown}/>
                </Main>
            </Container>
        )
    };

    render(){
        return this.state.data.length > 0 ? this.renderFullState() : <LoadingState />;
    };
}

export default Home;
